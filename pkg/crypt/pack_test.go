package crypt

import (
	"encoding/hex"
	"encoding/json"
	"fmt"
	. "github.com/haxqer/gofunc"
	"go-trailer-api/pkg/logging"
	"go-trailer-api/pkg/util"
	"net/url"
	"reflect"
	"testing"
)

var privateKeyBytes = []byte(`-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQCyBUxPA9X3tdJSsgNi0/CctBsBbvJEUgt5FWbbG4nTp2r7XK2T
Vk/YBZ6jq7kiA1rzJ/xmJTdpUdVUhPfX1DN/7iapb5K3z/NhIO/jsJgGO+YtgK5I
WEcjGwElPZnOsMk6iNZAWCGa7EyA0FHkul7w4eFOjC+RGqbKfsl306EUtwIDAQAB
AoGBAIMp8ip5ugoUVk4FyQbk/3CGJyusMiZyiO+C/FDN/oQK44EmrOFVA+k3YsZW
/UX5UOa9fHNKUoRv/g2TFwVX3UTVuri4h4x6zPfCOv3O1TUVaJzgCGa8bc/sNRu4
AlYZZdeKNxQbURbht/kbyu11HjyPqPP+ZXcwoalCiZQmtI/xAkEA7VbfGeQuH8Go
4SBv3EbQvFhJBWjjxmjIq3VQZD7HqdZMTqYnqaq3bVvqHWizrxyku2BbgaFbV5MJ
ZhbeZOF/bwJBAMAEeGbjs9xkPcfMcOCVypZpRcoi/0BMzj6Yl8YKmzxY6cNVIyEB
UukklSxZlbt8piFaZHZo1e85g1pDiX01GzkCQBvTx6y9eDr49dgPeY4WL3slzsn3
ll05A+42fwqB4d8j5SaDjLrz7TXBRR3VnNu3PAlMLu5wAMmvz7ZMkB674bkCQQCE
ZlCy+Uz6qW/kBXbLlN2Eyv/hOjJwnsUTalo0pvmVKeW910WKq4QE2EG3u+m/xloy
40YkU3M4KZsFsU3rNKQZAkAdJJEhk3+LwoCSD/hneL7aCtCAmmmWOuHTWjQAD1Zo
OEJTQoc9/wQ767QpGcbqdwF+KjaEVTqn5Wx+9UkMWhyy
-----END RSA PRIVATE KEY-----
`)

var publicKeyBytes = []byte(`-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCyBUxPA9X3tdJSsgNi0/CctBsB
bvJEUgt5FWbbG4nTp2r7XK2TVk/YBZ6jq7kiA1rzJ/xmJTdpUdVUhPfX1DN/7iap
b5K3z/NhIO/jsJgGO+YtgK5IWEcjGwElPZnOsMk6iNZAWCGa7EyA0FHkul7w4eFO
jC+RGqbKfsl306EUtwIDAQAB
-----END PUBLIC KEY-----
`)

func Test_clientPack(t *testing.T) {
	type args struct {
		b         []byte
		publicKey []byte
	}
	tests := []struct {
		name    string
		args    args
		want    *EData
		wantErr bool
	}{
		//{name: "testCase01", args: args{
		//	b:         []byte(`{"app":{"appid":8002,"sdk_ver":"1.2.0","bundle":"com.xxx.ooo","app_ver":"1.0","app_cert_md5":"5ff98aa90a14c8fdb32fcfa870b21a14"},"imp":{"slot":6},"device":{"ip":"27.115.98.150","geo":{"lon":-1,"lat":-1},"lac":null,"ci":null,"imei":null,"imsi":null,"device_id":"","mac":"90:a9:56:8a:82:d0","gwmac":"d4:ee:07:48:1c:4a","nearby":"[d4:ee:07:48:1c:4a, a4:5e:60:ec:fc:57]","carrier":"46011","language":"zh","make":"HMD Global","model":"NokiaX6","os":"Android","osv":"9","connectiontype":1,"devicetype":4,"s_density":2.625,"sw":2065,"sh":1080,"orientation":1,"ua":"Dalvik\/2.1.0 (Linux; U; Android 9; Nokia X6 Build\/PPR1.180610.011)","proxy":false}}`),
		//	publicKey: publicKeyBytes,
		//}},
		{name: "testCase02", args: args{
			b: []byte(`{
  "channel_code": "string",
  "device_no": "string",
  "page": 1,
  "page_size": 20
}
`),
			publicKey: publicKeyBytes,
		}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := clientPack(tt.args.b, tt.args.publicKey)
			if (err != nil) != tt.wantErr {
				t.Errorf("clientPack() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			unpack, err := Unpackv2(got, privateKeyBytes)
			if err != nil {
				t.Errorf("Unpack() error = %v", err)
				return
			}
			if !reflect.DeepEqual(unpack.Data, tt.args.b) {
				t.Errorf("Unpack() result error: unpack = %s, b: = %s", unpack.Data, tt.args.b)
			}
		})
	}
}

func Test_clientUnpack(t *testing.T) {
	type args struct {
		bk  []byte
		bed []byte
		biv []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		//{name: "testCase01", args: args{
		//	bk:  []byte(`lXTXVlrPd1ap6TOKK3RKEx+hjUTqkZwcEMTUU61U6mp5jdKoXvHzquY1lIvcppkJOFZPoez6PCYLbx+1iWVkRLARvUkhwnn9F6nIkwE3b6+j2fkQYJKKc0YgJZyvp6kkDPB1YmgLMKVRr0g2BuWe1USTHpgdfepe91v6akcuFFg=`),
		//	biv:  []byte(`01fl9nY8Frlu6bQNau2ONw==`),
		//	bed: []byte(`Vvv3LswVQ8o7lSbfHrynpeUUR283+NPIC+MBKJw2IsmdYzP3WBFyiwk5tyQXhXLXezvHnDwMi2069zjP0+Nuu67nSg/AawIVRcHaWY45b+5/BCWpduS9iFlckPBeYm1D3fRWsm1Vq/qBuqYbpp595X1oyfsh78fmiV/TdqK5r/5IcoyczQUXoiciSixnEz8gUEXLhMAt/RwPNoO9ZoSFUj0W+eBsS7ZQowmZYEcRnYjTUcCC3VlKsRRl1IkTshPPIs77xZ4LQ2K8gK+NU9/r6wgoJXkxOfAwba5pXaqeg20OkYyi0YnShIKaslZNEYWZo4smz5CHIx+XCSxABWq9sFlq6FkJhZpIIsLQj3vYbKXtY/iNW9jo+TditkeSdT64bCw4gro1xSnQorYIVzpXrxCgcG7BB5y/xS3xgbmurpx63K38wF6QqbCZ10buhTnvKb0D4XPrhDftLjgE5fAytLV21OYWizdKI0Y6sQMjiPx4rWuxGQMgE1UG+Ynxg9vthI2VRN4ugpAlPd3QB9kj17W8YhoiEsMVhx0Y1h0UICW7l2hjde31o0adykcAR3QGhsbyr8nLcuvHZ4VbKfwdsu9S7v7BtKz7VVGITXSZMN1voyP2qvbO+15B1bXTwMhm3SugQIU9vhq9q92lL3j4VFaFeMp12TpRC21o+6sD8xj+fjRGzF/TXabPwg2lhGG8CgB+CjDRwNB4t4foUZvl7vvysJbOq2WxkKtDZL0hIsQLeLx8eFVpbxycm+8G7Wo887IUA5sWI1PCxndQjfWTmW0LiYars8gstYnRH/Bji0zGfDSQh8w6sA0n46eOCvYhJj7egbWpeP94E2RZVxxHeGGrdSfJAUqQSTGH0MoXjrM=`),
		//}},
		//{name: "testCase02", args: args{
		//	bk:  []byte("lXTXVlrPd1ap6TOKK3RKEx+hjUTqkZwcEMTUU61U6mp5jdKoXvHzquY1lIvcppkJOFZPoez6PCYLbx+1iWVkRLARvUkhwnn9F6nIkwE3b6+j2fkQYJKKc0YgJZyvp6kkDPB1YmgLMKVRr0g2BuWe1USTHpgdfepe91v6akcuFFg="),
		//	biv: []byte("y6A0dDkc3/IzHYnMaJSzbA=="),
		//	bed: []byte(``),
		//}},
		//{name: "testCase03", args: args{
		//	bk:  []byte("lXTXVlrPd1ap6TOKK3RKEx+hjUTqkZwcEMTUU61U6mp5jdKoXvHzquY1lIvcppkJOFZPoez6PCYLbx+1iWVkRLARvUkhwnn9F6nIkwE3b6+j2fkQYJKKc0YgJZyvp6kkDPB1YmgLMKVRr0g2BuWe1USTHpgdfepe91v6akcuFFg="),
		//	biv: []byte("IkIzaNjV51XQjV2hzKMHBw=="),
		//	bed: []byte(``),
		//}},
		//{name: "testCase04", args: args{
		//	bk:  []byte("lXTXVlrPd1ap6TOKK3RKEx+hjUTqkZwcEMTUU61U6mp5jdKoXvHzquY1lIvcppkJOFZPoez6PCYLbx+1iWVkRLARvUkhwnn9F6nIkwE3b6+j2fkQYJKKc0YgJZyvp6kkDPB1YmgLMKVRr0g2BuWe1USTHpgdfepe91v6akcuFFg="),
		//	biv: []byte("M1NlSOef/EclLGYqpvw7hQ=="),
		//	bed: []byte(`HbmU5HaYQy02TJBAa9LrlOdXkWYwmzNWr9iNy+V+d7G2K4OPOVfSpHlS6ptp9/B480SKJ5k1Mxs4AlkGfhJQeTOzrSdJzgka0+axPUOaWmR9wi1asa/pzdlc61SXIvsE8zHjmSr8rrBwueyTTe5I685A6B3w+q3obJB3LknTboGtpXBKlNDyMRj7slv4U67wkkIiw3auRtSrjFPXDVjF3v0KtlKF7c9tpehQ2WmAoqTceUE/9+eCMJ45lqyVwOgc1TWG7EOU6rVwcoXlJqmVyu8bdtJgSMUHcb02dQywcx+zDM+pmfIOZGs+GcmI2uhNPmSmfl1gAB6e8p1EI4ezsWTf7h3eqQJCyzSknSPkizadkwPTSctlLMwY1r2gAfRBc6E1+BMi1TTt5NzK0QbkfO8gfwxxETtwsc4ixcP16OHc615AvWmNMeA8mC+WsuIgtcH5Bach/Avpwq4OqCJ9xuVzzbiOfvVh7lfrSFNKJuwIzeV9Nkk3AAfCtvjCIgFCFCgn1w3WMcUP7nJlggs1UYzCK6iGzF4tJcls5jLprS6U7/cAcDvVENF/zMuFUmlmOYefm3shkcvHX7Q65S8KI1Z32XKjLpVQaUPeP5Pp60t5DMotqmEziwscPEvtwwKgAAuch+e0+s7lcIhkF782VhgUc+asX+wc4mfg2N5ZR+toDks3FSHQ2ZB8RMfhvjnHBTBWpwyPtqDi6sotytKXrj3r1PoA3mp0wGW2LftbxWE=`),
		//}},
		{name: "testCase05", args: args{
			bk:  []byte(`6FPtILSWtNC3sxqFZGEx3irRJR0vM1kUsJJNLaTvlxvSiFb64PRPftjPy1xV67FD5KEqCHUbie3glBmqq6y44Mr2pdvL8TOrkj1sM88jgQHCnJEYyrXWf8szbCkZtgCz9a30N309jL1Sg/tefUQTnv/qEdbIX06HNw==`),
			biv: []byte("COcJ4RASVJLc39a3tUhDAg=="),
			bed: []byte(`iTbgE8vgbgM/gVIaW/9Sow1x17WMzqUkHn8P/fPH6xncezra09JgJAjNwYfa8jPjsc0eUhr7cunyD0sJbS8VvnQVocpUBy2z99o3Q/EE79z/eyVztp5W3J7Dq647wFx2a8owuztzTrAw5Dd9hAi19b+OKgyQw6y8BNwI7oiMyCS/w6Dte7RdS7HBgL593vckRrEhyugYYqZGsayUOks4/KlW+org2n3F4e4GNZja7E8THk8woDasJuMO9J/uiUOsFSn0WCTNqrXxYuMdEmdvdq1qTlxTyqRlrPmGi0t9FSVxZH42W4caBuUXLWF4ipLQoFtKxicNmounmZDjsySPUK0mEy2bzS4hm1RhCys11ShOrlouM8/cpTweBg5E9vgsKDFCPSMYrfnp7Yjc1G5g7fUhFpJj+mMk1LY2hAmoPtAVdLUw6dbwtPvysXkQcnLgQ0l8nOb3a08mV+mI9OSMz7KfQpTfTJ/dk4xXlkbAiF7ESSUl6XpgXm3HU4PJoT8E0Mx9ElvJpz/ghah/dVHeXcx8AvxajhrswjJZHmXtLm4ZZ662sXSrdxLhagSR8+/XF336Y/mPcKWKr+VgxkRSi/KwaiOgaCXWPsx2K3sHy4WguiZQiJEqKM/FGSe3f1dVt/1d5GzeI9Vw4se/45dWnNJNcExCIEl3YRnAPFfNkVxlpOE1OtJ5CgSWq8MXS2fmwyn3dcYb8hsHhQn61mtXeKUx1+s3ns/cs48koW0KXsSGJtnA25OHaEZ7iLuWIMq7`),
		}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			res, err := clientUnpack(tt.args.bk, tt.args.bed, tt.args.biv, privateKeyBytes)
			if (err != nil) != tt.wantErr {
				t.Errorf("clientUnpack() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			fmt.Printf("%s \n", res)
			//if !reflect.DeepEqual(got, tt.want) {
			//	t.Errorf("clientUnpack() got = %s, want %v", got, tt.want)
			//}
		})
	}
}

func TestUnpack(t *testing.T) {
	type args struct {
		r          *EData
		privateKey []byte
	}
	tests := []struct {
		name    string
		args    args
		want    *PData
		wantErr bool
	}{
		{name: "testCase01", args: args{
			r: &EData{
				IV: []byte("TZu+X43tZE8yMm+dPOQmcg=="),
				EK: []byte("lUS01xNls8KS+dAIXru4ydDcn0NPd6oeXaa0A1VUki3nTk/IF+8THa8zxRFR629+kXdjp+hI89JWGwnKCYx+0i0J1tEVucF4l3zeGauq0k4P5kzphjEyPXq8KWEocWVj3PCsiR2I5t2Gm4MHCw/M/OlER4s/aIJlOH5CMkq7uqY="),
				ED: []byte(`caSpxrQbE86Qa00zNoqsZd8gGNUL4pKaOT/+pY7Zb9FdqSWlZIScJxoFBXxTBmVzZmlnLCiv2gwZ1pTWXSB6cxEF9uTLng7GGqsriyVij5lnz+za2QaJYS3sec7Ep2NtM36ukGBs8I+ImuAKurNqgPH1gC53FLVY8ANcPY9yI2Je5gugdR/gBjnEjEgIhgn89H9mC0uZQYlJSOfhNC1+VFIXc1e/Z7a09Sm1i7NdeldnsJug3IiTv8nAxca7nXkeEY9ZpE8WWm5upWCfoE3FdbsVzLa+WtamZlE1bl/cH/zRw1xNQxJ5useRsNnjonahM/+mHEGO5cE2Kx0IRY5Zu9J/pleiqEN+OqoKldX2eFLIRm6rj82Ihte3De48Ws2ETZQx9hakF+2dom0xJRVG2fBsFLZpfZdAV+++BUnWadGofPhHh5/YMvCvQ3qnjdZ4ZzHP7a7VExGEGAnYrGQsIkyKS+wi1zLF17GmAsCrW0Ks6KJCa4kos6mMNJ+tIgvn`),
			},
			privateKey: privateKeyBytes,
		}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := Unpackv2(tt.args.r, tt.args.privateKey)
			if (err != nil) != tt.wantErr {
				t.Errorf("Unpack() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			fmt.Printf("%s \n", got.Data)
			fmt.Printf("%s \n", Base64EncodeByte(got.Key))
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Unpack() got = %s, want %v", got.Data, tt.want)
			}
		})
	}
}

func TestPack(t *testing.T) {
	type args struct {
		p *PData
	}
	key, _ := hex.DecodeString("6d533054644230744c30764e76587358")
	tests := []struct {
		name    string
		args    args
		want    *EData
		wantErr bool
	}{
		{name: "testCase01", args: args{&PData{
			Data: []byte(`{
    "code": 1,
    "msg": "ok",
    "data": {
        "id": 7,
        "app_name": "ScreenSaveDemo",
        "app_url": "https://xmx-oss1.oss-cn-shanghai.aliyuncs.com/sdk_update_package/b21739eeea3e0619cfb725a436978e00.apk",
        "app_version_name": "1.0.2",
        "app_version_code": "6",
        "remark": "",
        "is_force_user_update": 0,
        "is_optional_user_update": 0,
        "is_silent_update": 0,
        "is_hot_update": 1,
        "create_time": "",
        "create_user_id": 0,
        "update_time": "",
        "update_user_id": 0
    }
}`),
			Key: key,
		}}, want: nil, wantErr: false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := Packv2(tt.args.p)
			if (err != nil) != tt.wantErr {
				t.Errorf("Pack() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			fmt.Printf("Pack() got.IV = %s, got.ED = %s \n, got.EK = %s \n", got.IV, got.ED, got.EK)

			//fmt.Printf("key: %X \n", key)
			// rsa 公钥加密 key, 生成加密后的 ek
			ek, _ := RsaEncode(key, publicKeyBytes)
			bek := Base64EncodeByte(ek)

			fmt.Printf("Pack() KEY = %s \n", bek)
			//if !reflect.DeepEqual(got, tt.want) {
			//	t.Errorf("Pack() got.IV = %s, got.ED = %s, want %s", got.IV, got.ED, tt.want)
			//}
		})
	}
}

func TestUnPackOnlyAES(t *testing.T) {
	type args struct {
		r   *EData
		key []byte
	}
	key, _ := hex.DecodeString("6d533054644230744c30764e76587358")
	tests := []struct {
		name    string
		args    args
		want    *PData
		wantErr bool
	}{
		{name: "testCase01", args: args{
			r: &EData{
				ED: []byte(`COZIuIDMzwP1dNs+awE9TLJK0AkwAmwQ48sFay103ecnC7u6jXID9crwRCJJlvAWPhycjkzPiwL2CNWBqduMl0GmOyw3WZjxp9RTwn9ugXNPt5Bur5xnxvx4jZsUr89OiuaOSTtF0+80RJJVkXpXvuhFjBAhkGMK6hcPQEaYmA3zD7EY50MiKOnJcMkbsRLC9Ldm9E/SgwFj7GVEL2WXAJIFtxlhqxyivJJBDB/AhsE7J00T4ggM2f49yQDJcNBX4u84Yyv81bAWuUIqwGmXGeB/mW+LuZgMpC6IvbOwILv5xKMOtDXo+048jcmaidXpkGS6mzdnzrNqQobLphPCHRQOwN4b4EcHMAF0woWpMFE69OCrQkYbU+T1IysygJq9vfcACrkgEXH146fcBuri2I/0ChRGGyOJfBZGLvOKI7/qaTWztsRfWa/YdEDV48wSMX9/h+2eJGQoGtZBw6DjlW9PFLu+RxRhp3QKN9BZWGEBp/q9QA+jKOq5uozlWtelXS6S1fUoTLdtZSYTTex9biyll9CLS333voorJ0VkN28=`),
				IV: []byte("8tF9tUc8O04g23waH3MDVA=="),
			},
			key: key,
		}, want: &PData{
			Data: []byte(`{"settings": {"test": 123},"settings2": {"test": 123},"settings3": {"test": 123}}`),
			Key:  []byte("mS0TdB0tL0vNvXsX"),
		}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := UnPackOnlyAES(tt.args.r, tt.args.key)
			if (err != nil) != tt.wantErr {
				t.Errorf("UnPackOnlyAES() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("UnPackOnlyAES() got = %s, want %s", got, tt.want)
			}
		})
	}
}

// 仅测试用
func clientPack(b, publicKey []byte) (*EData, error) {
	// 随机生成一个32位的 key
	key, err := GenRandomEK()
	if err != nil {
		return nil, err
	}
	//fmt.Printf("key: %X \n", key)
	// rsa 公钥加密 key, 生成加密后的 ek
	ek, err := RsaEncode(key, publicKey)
	if err != nil {
		return nil, err
	}
	// 将加密后的 ek 进行 Base64Encode
	bek := Base64EncodeByte(ek)
	fmt.Printf("bek: %s \n", bek)

	//fmt.Printf("ek: %X \n", ek)
	// 使用上一步随机生成的 key, 随机生成一个 IV (这里已经封装在 AesCBCEncrypt中), 生成 ed
	en, err := AesCBCEncrypt(b, key, PKCS5Padding)
	if err != nil {
		return nil, err
	}
	iv := en[:16]
	ed := en[16:]

	//fmt.Printf("ed: %X \n", ed)
	// 将加密后的 ed 进行 Base64Encode
	biv := Base64EncodeByte(iv)
	bed := Base64EncodeByte(ed)

	fmt.Printf("biv: %s \n", biv)
	fmt.Printf("bed: %s \n", bed)
	return &EData{
		EK: bek,
		ED: bed,
		IV: biv,
	}, nil
}

func clientUnpack(ebk, bed, biv, privateKey []byte) ([]byte, error) {
	ek, err := Base64DecodeByte(ebk)
	if err != nil {
		return nil, err
	}
	key, err := RsaDecode(ek, privateKey)
	if err != nil {
		return nil, err
	}
	iv, err := Base64DecodeByte(biv)
	if err != nil {
		return nil, err
	}
	ed, err := Base64DecodeByte(bed)
	if err != nil {
		return nil, err
	}
	realEd := append(iv, ed...)

	//fmt.Printf("%d\n", len(realEd))

	b, err := AesCBCDecrypt(realEd, key, PKCS5UnPadding)
	if err != nil {
		return nil, err
	}
	//fmt.Printf("%s \n", b)
	return b, nil
}

func TestSignature(t *testing.T) {
	data := []byte(`{
  "app_name": "ScreenSaverDemo",
  "app_version_code": "5",
  "app_version_name": "1.0.4",
  "channel_code": "tiaoshi",
  "client_time": "2020-12-26 20:20:20",
  "device_brand": "samsung",
  "device_model": "SM-G9508",
  "device_no": "oGVivbkkk89BjF18nvBYbA_test",
  "event_info": "[{\"event_kv_json\":{\"trailer_id\": 50},\"event_name\":\"player_trailer\",\"event_type\":0},{\"event_kv_json\":{\"trailer_id\": \"58\", \"button_name\": \"BUTTON_RETURN\"},\"event_name\":\"遥控器互动按键\",\"event_type\":0},{\"event_kv_json\":{\"is_first\": \"1\"},\"event_name\":\"SDK启动\",\"event_type\":1}]",
  "event_kv_json": "",
  "event_name": "",
  "imei": "",
  "ip": "",
  "net_type": "1",
  "newevent_type": 0,
  "newpuid": "0",
  "newsession_id": "9BBF3E88A97B29F0A79932B32A7835DE",
  "os_version_code": "26",
  "os_version_name": "8.0.0",
  "page_name": "com.xmx.screensaver.plugin.SFWorkActivity",
  "screen_height": 2220,
  "screen_width": 1080,
  "sdk_name": "screensaver_sdk",
  "sdk_version_code": "5",
  "sdk_version_name": "1.0.4",
  "signature": "bee93d6655ab8d5287c79927003cd2b1"
}`)

	params := make(map[string]interface{})
	err := json.Unmarshal(data, &params)
	if err != nil {
		logging.Info(err)
	}

	var dataParams string = "?" // 拼接后的参数
	signature := ""             //签名
	//ksort
	//var keys []string
	//for k := range params {
	//	keys = append(keys, k)
	//}
	//sort.Strings(keys)

	//拼接
	for k, v := range params {
		if k == "signature" {
			signature = fmt.Sprintf("%v", v)
		} else {
			val := fmt.Sprintf("%v", v)
			if len(val) > 0 {
				fmt.Println("k:" + k + ";v:" + fmt.Sprintf("%v", v))
				dataParams += k + "=" + fmt.Sprintf("%v", v) + "&"
			}
		}
	}
	us, _ := url.Parse(dataParams)
	dataParams = us.Query().Encode()
	dataParams += "&trailer_signature_salt"

	fmt.Println(dataParams)

	mySignature := util.Md5V(dataParams)

	fmt.Println("mySignature : " + mySignature + " ; paramSignature:" + signature)

}

func TestConf(t *testing.T) {
	err, d := util.GetStandbyTime()
	if err != nil {
		fmt.Printf("%v", err)
	}

	fmt.Println(d)
}
